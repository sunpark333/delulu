# news_processor.py - AI News Enhancement Module
import openai
import asyncio
import logging
from typing import Optional, Dict, Any
import config
from rate_limiter import RateLimiter
from categorizer import NewsCategori

logger = logging.getLogger(__name__)

class NewsProcessor:
    def __init__(self):
        openai.api_key = config.OPENAI_API_KEY
        self.rate_limiter = RateLimiter()
        self.categorizer = NewsCategori()
        
    async def enhance_news(self, original_news: str, user_id: int = None) -> Dict[str, Any]:
        """
        AI ‡§∏‡•á news ‡§ï‡•ã enhance ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
        Returns: Dict with enhanced_news, category, metrics
        """
        try:
            # Input validation
            if not self._validate_news_input(original_news):
                raise ValueError("Invalid news input")
            
            # Rate limiting check
            if user_id and not self.rate_limiter.check_rate_limit(user_id):
                raise Exception("Rate limit exceeded")
            
            # News category detect ‡§ï‡§∞‡•á‡§Ç
            category = self.categorizer.detect_category(original_news)
            
            # AI prompt prepare ‡§ï‡§∞‡•á‡§Ç
            enhanced_prompt = self._prepare_ai_prompt(original_news, category)
            
            # OpenAI API call
            enhanced_news = await self._call_openai_api(enhanced_prompt)
            
            # Post-processing
            final_news = self._post_process_news(enhanced_news, category)
            
            # Metrics calculate ‡§ï‡§∞‡•á‡§Ç
            metrics = self._calculate_metrics(original_news, final_news)
            
            logger.info(f"News enhanced successfully. Length: {len(original_news)} -> {len(final_news)}")
            
            return {
                "enhanced_news": final_news,
                "category": category,
                "metrics": metrics,
                "success": True
            }
            
        except Exception as e:
            logger.error(f"Error enhancing news: {e}")
            return {
                "enhanced_news": original_news,
                "category": "üîî General",
                "metrics": {"error": str(e)},
                "success": False
            }
    
    def _validate_news_input(self, news: str) -> bool:
        """News input validation"""
        if not news or not news.strip():
            return False
        if len(news) < config.MIN_NEWS_LENGTH:
            return False
        if len(news) > config.MAX_NEWS_LENGTH:
            return False
        return True
    
    def _prepare_ai_prompt(self, original_news: str, category: str) -> str:
        """AI ‡§ï‡•á ‡§≤‡§ø‡§è prompt prepare ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        category_context = {
            "üèõÔ∏è Politics": "‡§∞‡§æ‡§ú‡§®‡•Ä‡§§‡§ø‡§ï ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§î‡§∞ background add ‡§ï‡§∞‡•á‡§Ç",
            "üí∞ Business": "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï impact ‡§î‡§∞ market context add ‡§ï‡§∞‡•á‡§Ç", 
            "‚öΩ Sports": "‡§ñ‡•á‡§≤ ‡§ï‡•á rules ‡§î‡§∞ player stats add ‡§ï‡§∞‡•á‡§Ç",
            "üé¨ Entertainment": "Celebrity background ‡§î‡§∞ industry context add ‡§ï‡§∞‡•á‡§Ç",
            "üî¨ Technology": "Technical details ‡§î‡§∞ future implications add ‡§ï‡§∞‡•á‡§Ç",
            "üåç International": "Global context ‡§î‡§∞ diplomatic angles add ‡§ï‡§∞‡•á‡§Ç",
            "üè• Health": "Medical context ‡§î‡§∞ safety guidelines add ‡§ï‡§∞‡•á‡§Ç",
            "üéì Education": "Educational impact ‡§î‡§∞ policy context add ‡§ï‡§∞‡•á‡§Ç",
            "üå¶Ô∏è Weather": "Scientific explanation ‡§î‡§∞ safety measures add ‡§ï‡§∞‡•á‡§Ç",
            "üö® Breaking": "Immediate impact ‡§î‡§∞ urgent context add ‡§ï‡§∞‡•á‡§Ç"
        }
        
        category_instruction = category_context.get(category, "General context add ‡§ï‡§∞‡•á‡§Ç")
        
        prompt = f"""
{config.AI_PROMPT_TEMPLATE}

Category: {category}
Special Focus: {category_instruction}

Original News: {original_news}

Enhanced News:
"""
        return prompt
    
    async def _call_openai_api(self, prompt: str) -> str:
        """OpenAI API call with error handling"""
        try:
            response = await asyncio.wait_for(
                asyncio.to_thread(
                    openai.ChatCompletion.create,
                    model=config.AI_MODEL,
                    messages=[
                        {
                            "role": "system", 
                            "content": "‡§Ü‡§™ ‡§è‡§ï professional news writer ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™‡§ï‡§æ ‡§ï‡§æ‡§Æ news ‡§ï‡•ã enhance ‡§ï‡§∞‡§®‡§æ ‡§π‡•à‡•§"
                        },
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=1000,
                    temperature=0.7
                ),
                timeout=config.API_TIMEOUT
            )
            
            return response.choices[0].message.content.strip()
            
        except asyncio.TimeoutError:
            logger.error("OpenAI API timeout")
            raise Exception("AI processing timeout")
        except Exception as e:
            logger.error(f"OpenAI API error: {e}")
            raise Exception("AI processing failed")
    
    def _post_process_news(self, enhanced_news: str, category: str) -> str:
        """Post-processing enhanced news"""
        # Category emoji add ‡§ï‡§∞‡•á‡§Ç
        if not enhanced_news.startswith(category.split()[0]):
            enhanced_news = f"{category.split()[0]} **{category.split()[1]}**\n\n{enhanced_news}"
        
        # Formatting improvements
        enhanced_news = self._improve_formatting(enhanced_news)
        
        # Add timestamp
        from datetime import datetime
        timestamp = datetime.now().strftime("%d %B %Y, %I:%M %p")
        enhanced_news += f"\n\nüìÖ *Updated: {timestamp}*"
        
        return enhanced_news
    
    def _improve_formatting(self, text: str) -> str:
        """Text formatting improve ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        # Basic formatting improvements
        lines = text.split('\n')
        formatted_lines = []
        
        for line in lines:
            line = line.strip()
            if line:
                # Headings ‡§ï‡•ã bold ‡§¨‡§®‡§æ‡§è‡§Ç
                if len(line) < 50 and line.endswith((':','‡•§')):
                    line = f"**{line}**"
                formatted_lines.append(line)
        
        return '\n\n'.join(formatted_lines)
    
    def _calculate_metrics(self, original: str, enhanced: str) -> Dict[str, Any]:
        """News enhancement metrics calculate ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        return {
            "original_length": len(original),
            "enhanced_length": len(enhanced),
            "improvement_ratio": len(enhanced) / len(original) if len(original) > 0 else 0,
            "words_added": len(enhanced.split()) - len(original.split()),
            "processing_time": "< 5 seconds"
        }
    
    async def bulk_enhance_news(self, news_list: list, user_id: int = None) -> list:
        """Multiple news items ‡§ï‡•ã ‡§è‡§ï ‡§∏‡§æ‡§• enhance ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        results = []
        for news in news_list:
            result = await self.enhance_news(news, user_id)
            results.append(result)
            # Rate limiting ‡§ï‡•á ‡§≤‡§ø‡§è delay
            await asyncio.sleep(1)
        return results